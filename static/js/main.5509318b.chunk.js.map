{"version":3,"sources":["Homepage/Homepage.js","assets/loading.png","WordSelector/WordSelector.js","Gamepage/Gamepage.js","Lobby/Lobby.js","App.js","History.js","reportWebVitals.js","index.js"],"names":["Homepage","props","className","data-testid","disabled","hasGenerator","onClick","designateRole","propType","PropTypes","func","WordSelector","updateChange","e","preventDefault","setState","guessWord","target","value","makeWordToGuess","state","this","isGenerator","type","onChange","placeholder","id","src","loading","alt","Component","bool","Gamepage","currentGuess","makeGuess","document","querySelector","mapAttempts","theKey","attempts","map","attempt","splitDisplay","theTestId","display","tile","isGenDisplay","name","render","remainingGuesses","playerNames","hints","correctGuesses","array","Lobby","roomID","newRoomName","newUserName","rooms","length","size","roomName","i","joinRoom","setUserName","createRoom","client","createBrowserHistory","App","componentDidMount","ioc","connect","on","console","log","isLoading","emit","leaveRoom","setRole","role","userName","sendWordToGuess","word","newGuess","resetGame","inGame","isGameReady","isOver","numOnline","History","window","setTimeout","push","setHistory","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","history","getElementById"],"mappings":"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","file":"static/js/main.5509318b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Homepage.css';\n\nexport const Homepage = (props) => {\n  return (\n    <div className=\"homepage\" data-testid=\"homepage\">\n      <h1><em>Choose a role</em></h1>\n      <div className=\"character-select\">\n        <button\n          className=\"generator\"\n          disabled={props.hasGenerator}\n          onClick={() => {\n            props.designateRole(true)\n          }}>\n          Generator\n        </button>\n        <button\n          className=\"guesser\"\n          onClick={() => {\n            props.designateRole(false)\n          }\n        }>\n          Guesser\n        </button>\n      </div>\n      <h1><em>Score: </em></h1>\n    </div>\n  )\n}\n\n\nHomepage.propType = {\n  designateRole: PropTypes.func,\n}\n","export default __webpack_public_path__ + \"static/media/loading.b33cf617.png\";","import React, {Component} from 'react';\nimport loading from '../assets/loading.png';\nimport PropTypes from 'prop-types';\nimport './WordSelector.css';\n\nexport class WordSelector extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      guessWord: ''\n    }\n  }\n\n  updateChange = (e) => {\n    e.preventDefault();\n    this.setState({guessWord: e.target.value})\n  }\n\n  makeWordToGuess = (e) => {\n    e.preventDefault();\n    this.props.makeWordToGuess(this.state.guessWord)\n  }\n\n  render() {\n    if (this.props.isGenerator) {\n      return (\n        <div className=\"selection-page\" data-testid=\"word-selector\">\n          <h2><em>Type a word for your opponent to guess!</em></h2>\n          <form>\n            <label>\n              <input \n                type=\"text\" \n                className=\"set-word\" \n                onChange={this.updateChange} \n                placeholder=\"Set Word or Phrase\"\n              />\n            </label>\n            <input\n              id='wordSubmit'\n              type=\"submit\"\n              value=\"Submit\"\n              placeholder=\"Submit\"\n              onClick={(e) => {\n                this.makeWordToGuess(e)\n              }}\n            />\n          </form>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"selection-page\">\n          <h2><em>Your opponent is thinking of a word...</em></h2>\n          <img src={loading} alt=\"Loading image\" className='Loading'/>\n        </div>\n      )\n    }\n  }\n}\n\n\nWordSelector.propType = {\n  makeWordToGuess: PropTypes.func,\n  isGenerator: PropTypes.bool\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Gamepage.css';\n\nexport class Gamepage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      hints: [],\n      correctGuesses: [],\n      currentGuess: ''\n    }\n  }\n\n  updateChange = (e) => {\n    e.preventDefault();\n    this.setState({currentGuess: e.target.value})\n  }\n\n  makeGuess = (e) => {\n    e.preventDefault();\n    this.props.makeGuess(this.state.currentGuess)\n    document.querySelector('.word-input').value = '';\n  }\n\n  mapAttempts = () => {\n    let theKey = 0;\n    return this.props.attempts.map(attempt => {\n      theKey += 1;\n      return <p key={theKey}>{attempt}</p>\n    })\n  }\n\n  splitDisplay = () => {\n    let theKey = 0;\n    let theTestId = 0;\n    return this.props.display.map(tile => {\n      theKey += 1;\n      theTestId += 1;\n      return <p data-testid={`${theTestId}`} key={theKey}>{tile}</p>\n    })\n  }\n\n  isGenDisplay = () => {\n    if (!this.props.isGenerator) {\n      return (\n        <form>\n        <label>\n          <input\n            type=\"text\"\n            name=\"word\"\n            className=\"word-input\"\n            placeholder=\"Letter or Word\"\n            onChange={this.updateChange}\n          />\n        </label>\n        <input\n          id='guess-button'\n          type=\"submit\"\n          value=\"Guess\"\n          data-testid='word-submit-button'\n          onClick={(e) => {\n              this.makeGuess(e)\n              }}\n        />\n      </form>\n      )\n    }\n  }\n\n  render = () => {\n    return (\n      <div className=\"game-page\" data-testid=\"game-page\">\n        <div className=\"chat\">\n          <h2>\n            <em>Chat</em>\n          </h2>\n        </div>\n        <div className=\"board\">\n          <div className=\"draw-board\">\n            <h2><em>Draw Board</em></h2>\n            <h3><em>Remaining Guesses: {this.props.remainingGuesses}</em></h3>\n          <div className=\"display-word\">{this.splitDisplay()}</div>\n          </div>\n          {this.isGenDisplay()}\n        </div>\n        <div className=\"players\">\n          <h2>\n            <em>Current Players</em>\n          </h2>\n          {this.props.playerNames.map(name => <h3>{name}</h3>)}\n        </div>\n        <div className=\"attempts\">\n          <h2>\n            <em>Attempts</em>\n          </h2>\n          <div>\n            {this.mapAttempts()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nGamepage.propType = {\n  makeGuess: PropTypes.func,\n  attempts: PropTypes.array,\n  display: PropTypes.array,\n  isGenerator: PropTypes.bool,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Lobby.css';\n\nexport class Lobby extends Component {\n  constructor( props ) {\n    super(props);\n    this.state = {\n      roomID: null,\n      newRoomName: '',\n      newUserName: ''\n    }\n  }\n\n  render() {\n    let rooms;\n      if (this.props.rooms.length) {\n        rooms = (\n          <div className=\"room-list\">\n            <select\n              size=\"8\"\n              className=\"room-list-select\"\n              onChange={(e) => this.setState({roomID: e.target.value})}\n            >{this.props.rooms.map((roomName, i) => {\n              return (\n                <option key={i} value={roomName}>{roomName}</option>\n              )\n            })}\n            </select>\n            <button\n              className=\"join-room-btn\"\n              onClick={() => this.props.joinRoom(this.state.roomID)}\n            >Join room!</button>\n          </div>\n        );\n      } else {\n        rooms = <h3>Seems like there are no open rooms. Use the form below to open one!</h3>;\n      }\n\n    return (\n      <div className=\"lobby\" data-testid=\"lobby\">\n        <h1><em>Please select a user name</em></h1>\n        <form>\n          <label>\n            <input\n              className=\"username-input\"\n              type=\"text\"\n              onChange={(e) => this.setState({newUserName: e.target.value})}\n              placeholder=\"user name\"\n            />\n          </label>\n          <input\n            className=\"username-btn\"\n            type=\"submit\"\n            value=\"Submit\"\n            placeholder=\"Select User Name\"\n            onClick={(e) => {\n              e.preventDefault();\n              this.props.setUserName(this.state.newUserName)\n            }}\n          />\n        </form>\n        <h1><em>Available Rooms</em></h1>\n        {rooms}\n        <form>\n          <label>\n            <input\n              className=\"new-room-input\"\n              type=\"text\"\n              onChange={(e) => this.setState({newRoomName: e.target.value})}\n              placeholder=\"Room ID\"\n            />\n          </label>\n          <input\n            className=\"new-room-btn\"\n            type=\"submit\"\n            value=\"Submit\"\n            placeholder=\"Create\"\n            onClick={(e) => {\n              e.preventDefault();\n              this.props.createRoom(this.state.newRoomName)\n            }}\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\n\nLobby.propType = {\n  designateRole: PropTypes.func,\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport  { Homepage }  from '../src/Homepage/Homepage.js';\nimport  { WordSelector }  from '../src/WordSelector/WordSelector.js';\nimport  { Gamepage }  from '../src/Gamepage/Gamepage.js';\nimport  { Lobby }  from '../src/Lobby/Lobby.js';\nimport History from './History.js';\nimport './App.css';\n\nimport ioc from 'socket.io-client';\n\nlet client;\n\nexport class App extends Component{\n  constructor() {\n    super()\n    this.state = {\n      attempts: [],\n      display: [],\n      inGame: false,\n      isGameReady: false,\n      isGenerator: null,\n      isLoading: true,\n      isOver: false,\n      hasGenerator: null,\n      userName: 'guest',\n      rooms: [],\n      numOnline: 'calculating the number of',\n      remainingGuesses: 0\n    }\n  }\n\n  componentDidMount = () => {\n    client = ioc.connect( \"https://bangwords-api.herokuapp.com/\");\n    // client = ioc.connect( \"localhost:3001\");\n\n    client.on( 'result', (state) => {\n      console.log(state)\n      this.setState(state);\n    });\n    this.setState({isLoading: false});\n  }\n\n  createRoom = ( id ) => {\n    client.emit('createRoom', id);\n  }\n\n  joinRoom = ( id ) => {\n    client.emit('joinRoom', id);\n  }\n\n  leaveRoom = () => {\n    console.log('hello')\n    client.emit('leaveRoom');\n  }\n\n  setRole = (role) => {\n    client.emit('setRole', role, this.state.userName);\n    this.setState({isGenerator: role});\n  }\n\n  sendWordToGuess = (word) => {\n    client.emit('setWord', word);\n  }\n\n  setUserName = (userName) => {\n    this.setState({ userName })\n  }\n\n  makeGuess = (newGuess) => {\n    client.emit('makeGuess', newGuess)\n  }\n\n  resetGame = () => {\n    client.emit('clear')\n  }\n\n  setHistory() {\n    if (!this.state.inGame && History[History.length -1] !== '/lobby') {\n      window.setTimeout(() => History.push('/lobby'), 1);\n    }\n\n    else if (this.state.isGameReady && this.state.isGenerator !== null && History[History.length -1] !== '/gamepage') {\n      window.setTimeout(() => History.push('/gamepage'), 1);\n    }\n\n    else if ( this.state.isGenerator !== null && History[History.length -1] !== '/word-selector' ) {\n      window.setTimeout(() => History.push('/word-selector'), 1);\n    }\n\n    else if ( History[History.length -1] !== '/bangwords' ) {\n      window.setTimeout(() => History.push('/bangwords'), 1);\n    }\n  }\n\n  render() {\n    console.log(this.state)\n    if (this.state.isLoading) {\n      return (<h3>Loading...</h3>);\n    }\n    this.setHistory()\n    return (\n      <div className=\"BangWords\">\n        <header className=\"BangWords-header\">\n          {/* <h1 id='bangHeader'><em>BangWords</em></h1> */}\n          <h1 id='bangHeader'>BangWords</h1>\n          <h3>Logged in as: {this.state.userName}!</h3>\n          <h4>{this.state.numOnline} players online right now</h4>\n          <button\n            id='theButton'\n            onClick={this.resetGame}>\n            <em>Reset Game</em>\n          </button>\n          <button\n            className={!this.state.inGame ? 'hidden' : ''}\n            onClick={this.leaveRoom}>\n            <em>Leave Game</em>\n          </button>\n        </header>\n\n        <Route\n          exact path='/bangwords'\n          render={() => {\n            return (\n              <Homepage\n                designateRole={this.setRole}\n                hasGenerator={this.state.hasGenerator}\n            // addGenerator={this.addGenerator}\n            // generatorExists={this.state.generatorExists}\n              />\n            )\n          }}\n        />\n\n        <Route\n          exact path='/gamepage'\n          render={() => {\n            return (\n              <Gamepage\n                makeGuess={this.makeGuess}\n                attempts={this.state.attempts}\n                display={this.state.display}\n                isGenerator={this.state.isGenerator}\n                playerNames={this.state.playerNames}\n                remainingGuesses={this.state.remainingGuesses}\n              />\n            )\n          }}\n        />\n\n        <Route\n          exact path='/lobby'\n          render={() => {\n            return (\n              <Lobby\n                createRoom={this.createRoom}\n                joinRoom={this.joinRoom}\n                rooms={this.state.rooms}\n                setUserName={this.setUserName}\n              />\n            )\n          }}\n        />\n\n        <Route\n          exact path='/word-selector'\n          render={() => {\n            return (\n              <WordSelector\n                makeWordToGuess={this.sendWordToGuess}\n                isGenerator={this.state.isGenerator}\n              />\n            )\n          }}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import {createBrowserHistory} from 'history';\nexport default createBrowserHistory();","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Router } from 'react-router-dom';\nimport history from './History.js';\n\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}