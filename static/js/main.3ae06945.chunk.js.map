{"version":3,"sources":["App.js","Homepage/Homepage.js","assets/loading.png","WordSelector/WordSelector.js","assets/crown.png","assets/lose.png","assets/win.png","Chat/Chat.js","Gamepage/Gamepage.js","Lobby/Lobby.js","Footer/Footer.js","History.js","reportWebVitals.js","index.js"],"names":["client","Homepage","props","className","data-testid","disabled","hasGenerator","onClick","designateRole","WordSelector","updateChange","e","preventDefault","setState","guessWord","target","value","makeWordToGuess","state","this","isGenerator","hasWord","type","onChange","placeholder","id","src","loading","alt","Component","Chat","scrollToBottom","messagesEnd","current","scrollIntoView","behavior","componentDidUpdate","sendMessage","newMessage","document","querySelector","updateNewMessage","mapChat","chat","map","message","i","render","style","float","clear","ref","React","createRef","Gamepage","createPlayerCard","name","score","attempts","didWin","key","image","true","win","false","lose","null","gen","crown","isSpinning","attemptsText","createWinnerMessage","isOver","messages","winners","concat","wordWas","pop","innerHTML","msg","isGenDisplay","autoComplete","isWon","makeGuess","currentGuess","mapAttempts","attempt","splitDisplay","display","tile","playerDisplay","playerNames","playerInfo","scores","endGameOverlay","attemptsLeft","hints","correctGuesses","Lobby","roomID","newRoomName","newUserName","rooms","length","size","roomName","joinRoom","setUserName","createRoom","Footer","creditsClicked","href","createBrowserHistory","App","componentDidMount","ioc","connect","on","push","isLoading","emit","leaveRoom","newGuess","setRole","role","userName","sendWordToGuess","word","inRoom","isGameReady","numOnline","History","window","setTimeout","setHistory","exact","path","mockRole","fakeAGuess","mockCreateRoom","mockJoinRoom","mockSetName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","onload","ReactDOM","history","getElementById"],"mappings":"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","file":"static/js/main.3ae06945.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport  { Homepage }  from '../src/Homepage/Homepage.js';\nimport  { WordSelector }  from '../src/WordSelector/WordSelector.js';\nimport  { Gamepage }  from '../src/Gamepage/Gamepage.js';\nimport  { Lobby }  from '../src/Lobby/Lobby.js';\nimport  { Footer }  from '../src/Footer/Footer.js';\nimport History from './History.js';\nimport './App.scss';\n\nimport ioc from 'socket.io-client';\n\nlet client;\n\nexport class App extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      attempts: [],\n      chat: [],\n      display: [],\n      inRoom: this.props.inRoom || false,\n      isGameReady: this.props.isGameReady || false,\n      isGenerator: this.props.isGenerator || null,\n      isLoading: true,\n      isOver: false,\n      isWon: false,\n      hasGenerator: null,\n      hasWord: false,\n      userName: this.props.userName || 'guest',\n      rooms: this.props.rooms || [],\n      numOnline: 'calculating the number of',\n      attemptsLeft: 0,\n      playerNames: [],\n      winners:['--REDACTED--']\n    }\n  }\n\n  componentDidMount = () => {\n    client = ioc.connect( \"https://bangwords-api.herokuapp.com/\");\n    // client = ioc.connect( \"localhost:3001\");\n\n    client.on( 'chatMessage', (message) => {\n      let chat = this.state.chat.concat();\n      chat.push(message);\n      this.setState({ chat })\n    })\n\n    client.on( 'result', (state) => {\n      this.setState(state);\n    });\n\n    this.setState({isLoading: false});\n  }\n\n  createRoom = ( id ) => {\n    client.emit('createRoom', id);\n  }\n\n  joinRoom = ( id ) => {\n    client.emit('joinRoom', id);\n  }\n\n  leaveRoom = () => {\n    client.emit('leaveRoom');\n    this.setState({ chat: [] })\n  }\n\n  makeGuess = (newGuess) => {\n    client.emit('makeGuess', newGuess)\n  }\n\n  setRole = (role) => {\n    client.emit('setRole', role, this.state.userName);\n    this.setState({isGenerator: role});\n  }\n\n  sendMessage = (message) => {\n    client.emit('sendMessage', message);\n  }\n\n  sendWordToGuess = (word) => {\n    client.emit('setWord', word);\n  }\n\n  setUserName = (userName) => {\n    this.setState({ userName })\n  }\n\n  // forfeitGame = () => {\n  //   client.emit('clear')\n  // }\n\n  setHistory() {\n    if (!this.state.inRoom && History[History.length -1] !== '/lobby') {\n      window.setTimeout(() => History.push('/lobby'), 1);\n    }\n\n    else if (this.state.isGameReady && this.state.isGenerator !== null && History[History.length -1] !== '/gamepage') {\n      window.setTimeout(() => History.push('/gamepage'), 1);\n    }\n\n    else if ( this.state.isGenerator !== null && History[History.length -1] !== '/word-selector' ) {\n      window.setTimeout(() => History.push('/word-selector'), 1);\n    }\n\n    else if ( History[History.length -1] !== '/bangwords' ) {\n      window.setTimeout(() => History.push('/bangwords'), 1);\n    }\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return (<h3>Loading...</h3>);\n    }\n    this.setHistory()\n    return (\n      <>\n        <div className=\"BangWords\">\n          <header className=\"BangWords-header\">\n            <h1 id='bangHeader'>BangWords</h1>\n            <div className='headerCenter'>\n              <h3 className='loggedInAs'>Logged in as: {this.state.userName}!\n              </h3>\n              <h4 className='playersOnline'>{this.state.numOnline} players online right now\n              </h4>\n            </div>\n            <div className='headerRight'>\n              <button\n                className={!this.state.inRoom ? 'hidden' : 'leave'}\n                onClick={this.leaveRoom}>\n                <em>Leave Game</em>\n              </button>\n            </div>\n          </header>\n\n          <Route\n            exact path='/bangwords'\n            render={() => {\n              return (\n                <Homepage\n                  designateRole={this.props.mockRole || this.setRole}\n                  hasGenerator={this.state.hasGenerator}\n                />\n              )\n            }}\n          />\n\n          <Route\n            exact path='/gamepage'\n            render={() => {\n              return (\n                <Gamepage\n                  attempts={this.state.attempts}\n                  attemptsLeft={this.state.attemptsLeft}\n                  chat={this.state.chat}\n                  display={this.state.display}\n                  isGenerator={this.state.isGenerator}\n                  isOver={this.state.isOver}\n                  isWon={this.state.isWon}\n                  makeGuess={this.props.fakeAGuess || this.makeGuess}\n                  playerNames={this.state.playerNames}\n                  scores={this.state.scores}\n                  sendMessage={this.sendMessage}\n                  winners={this.state.winners}\n                />\n              )\n            }}\n          />\n\n          <Route\n            exact path='/lobby'\n            render={() => {\n              return (\n                <Lobby\n                  createRoom={this.props.mockCreateRoom || this.createRoom}\n                  joinRoom={this.props.mockJoinRoom || this.joinRoom}\n                  rooms={this.state.rooms}\n                  setUserName={this.props.mockSetName || this.setUserName}\n                />\n              )\n            }}\n          />\n\n          <Route\n            exact path='/word-selector'\n            render={() => {\n              return (\n                <WordSelector\n                  makeWordToGuess={this.sendWordToGuess}\n                  isGenerator={this.state.isGenerator}\n                  hasGenerator={this.state.hasGenerator}\n                  hasWord={this.state.hasWord}\n                />\n              )\n            }}\n          />\n        </div>\n        <Footer/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import PropTypes from 'prop-types';\nimport './Homepage.scss';\n\nexport const Homepage = (props) => {\n  return (\n    <div className=\"homepage\" data-testid=\"homepage\">\n      <h1><em>Choose a role</em></h1>\n      <div className=\"character-select\">\n        <button\n          className=\"generator\"\n          disabled={props.hasGenerator}\n          data-testid='generator-button'\n          onClick={() => {\n            props.designateRole(true)\n          }}>\n          Generator\n        </button>\n        <button\n          className=\"guesser\"\n          data-testid='guesser-button'\n          onClick={() => {\n            props.designateRole(false)\n          }\n        }>\n          Guesser\n        </button>\n      </div>\n      <h1><em>Score: </em></h1>\n    </div>\n  )\n}\n\n\nHomepage.propTypes = {\n  hasGenerator: PropTypes.bool,\n  designateRole: PropTypes.func\n}","export default __webpack_public_path__ + \"static/media/loading.b33cf617.png\";","import React, {Component} from 'react';\nimport loading from '../assets/loading.png';\nimport PropTypes from 'prop-types';\nimport './WordSelector.scss';\n\nexport class WordSelector extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      guessWord: ''\n    }\n  }\n\n  updateChange = (e) => {\n    e.preventDefault();\n    this.setState({guessWord: e.target.value})\n  }\n\n  makeWordToGuess = (e) => {\n    e.preventDefault();\n    this.props.makeWordToGuess(this.state.guessWord)\n  }\n\n  render() {\n    if (this.props.isGenerator && !this.props.hasWord) {\n      return (\n        <div className=\"selection-page\" data-testid=\"word-generator\">\n          <h2><em>Type a word for your opponent to guess!</em></h2>\n          <form>\n            <label>\n              <input\n                type=\"text\"\n                className=\"set-word\"\n                onChange={this.updateChange}\n                placeholder=\"Set Word or Phrase\"\n              />\n            </label>\n            <input\n              id='wordSubmit'\n              type=\"submit\"\n              value=\"Submit\"\n              placeholder=\"Submit\"\n              onClick={(e) => {\n                this.makeWordToGuess(e)\n              }}\n            />\n          </form>\n        </div>\n      )\n    } else if (this.props.isGenerator || !this.props.hasGenerator) {\n      return (\n        <div className=\"selection-page\" data-testid=\"word-guesser\">\n          <h2><em>Waiting for other players to join...</em></h2>\n          <img src={loading} alt=\"Loading image\" className='Loading'/>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"selection-page\" data-testid=\"word-guesser\">\n          <h2><em>Your opponent is thinking of a word...</em></h2>\n          <img src={loading} alt=\"Loading image\" className='Loading'/>\n        </div>\n      )\n    }\n  }\n}\n\n\nWordSelector.propTypes = {\n  isGenerator: PropTypes.bool,\n  hasGenerator: PropTypes.bool,\n  hasWord: PropTypes.bool,\n  makeWordToGuess: PropTypes.func,\n}\n","export default __webpack_public_path__ + \"static/media/crown.0187391f.png\";","export default __webpack_public_path__ + \"static/media/lose.c491ab7e.png\";","export default __webpack_public_path__ + \"static/media/win.8498b53b.png\";","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Chat.scss';\n\nexport class Chat extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      newMessage: ''\n    }\n    this.messagesEnd = React.createRef()\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.current.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToBottom();\n  }\n\n  sendMessage = (e) => {\n    e.preventDefault();\n    this.props.sendMessage(this.state.newMessage)\n    document.querySelector('#chat-input').value = '';\n  }\n\n  updateNewMessage = (e) => {\n    e.preventDefault();\n    this.setState({newMessage: e.target.value})\n  }\n\n  mapChat = () => {\n    return this.props.chat.map((message, i) => <p key={i}>{message}</p>)\n  }\n\n  render = () => {\n    return (\n      <div className=\"chat chat-box\">\n        <div className='chat-messages'>\n          {this.mapChat()}\n          <div\n            className=\"chat-text\"\n            style={{ float:\"bottom\", clear: \"both\" }}\n            ref={ this.messagesEnd }>\n          </div>\n        </div>\n        <form className=\"chat-form\">\n          <input\n            id=\"chat-input\"\n            type=\"text\"\n            placeholder='Chat'\n            onChange={this.updateNewMessage}\n          />\n          <input\n            type='submit'\n            value='Send'\n            data-testid='Send'\n            className='Send'\n            onClick={this.sendMessage}\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\nChat.propTypes = {\n  sendMessage: PropTypes.func,\n  chat: PropTypes.array\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport crown from '../assets/crown.png';\nimport loading from '../assets/loading.png';\nimport lose from '../assets/lose.png';\nimport win from '../assets/win.png';\nimport { Chat } from '../Chat/Chat.js';\nimport './Gamepage.scss';\n\nexport class Gamepage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      hints: [],\n      correctGuesses: [],\n      currentGuess: ''\n    }\n  }\n\n  createPlayerCard = ( name, { score, attempts, didWin, key } ) => {\n    let image = {true: win, false: lose, null: loading, gen: crown}[didWin]\n    let isSpinning = didWin === null ? 'spin' : '' ;\n    let attemptsText = didWin === 'gen' ? '' : `${attempts} left`\n    return (\n      <div\n        className='player-card'\n        key={key}\n      >\n        <p>{name}:</p>\n        <p>{score} pts</p>\n        <p>{attemptsText}</p>\n        <img\n          className={isSpinning}\n          src={image}\n        />\n      </div>\n    )\n  }\n\n  createWinnerMessage = () => {\n    if (this.props.isOver) {\n      let messages = this.props.winners.concat();\n      let wordWas = messages.pop();\n      let innerHTML = messages.map((msg, i) => <p key={i}>{msg}</p>);\n      return(\n        <div className='endgame-overlay'>\n          <div className='message-bubble'>\n            <h2>GAME!</h2>\n            <h3>The word was: {wordWas}</h3>\n              {innerHTML}\n          </div>\n        </div>\n      )\n    } else {\n      return <div className='hidden'></div>\n    }\n  }\n\n  isGenDisplay = () => {\n    if (!this.props.isGenerator) {\n      return (\n        <div className='guessForm'>\n          <form className=\"guess-input\">\n            <label>\n              <input\n                type=\"text\"\n                autoComplete=\"off\"\n                name=\"word\"\n                className=\"word-input\"\n                disabled={this.props.isWon}\n                placeholder=\"Letter or Word\"\n                onChange={this.updateChange}\n                />\n            </label>\n            <input\n              id='guess-button'\n              type=\"submit\"\n              value=\"Guess\"\n              data-testid='word-submit-button'\n              disabled={this.props.isWon}\n              onClick={(e) => this.makeGuess(e)}\n              />\n          </form>\n        </div>\n      )\n    }\n  }\n\n  makeGuess = (e) => {\n    e.preventDefault();\n    this.props.makeGuess(this.state.currentGuess)\n    document.querySelector('.word-input').value = '';\n  }\n\n  mapAttempts = () => {\n    return this.props.attempts.map((attempt, i) => {\n      return <p key={i}>{attempt}</p>\n    })\n  }\n\n  splitDisplay = () => {\n    return this.props.display.map((tile, i) => {\n      return <p data-testid={i} key={i}>{tile}</p>\n    })\n  }\n\n  updateChange = (e) => {\n    e.preventDefault();\n    this.setState({currentGuess: e.target.value})\n  }\n\n  render = () => {\n    let playerDisplay = this.props.playerNames.map( (name, i) => {\n      let playerInfo = { ...this.props.scores[name], key: i}\n      return this.createPlayerCard(name, playerInfo)\n    })\n    let endGameOverlay = this.createWinnerMessage();\n    return (\n      <div className=\"game-page\" data-testid=\"game-page\">\n        {endGameOverlay}\n        <div className=\"draw-board\">\n          <h2><em>Game Board</em></h2>\n          <h3><em>Remaining Guesses: {this.props.attemptsLeft}</em></h3>\n          <div className=\"display-word\">{this.splitDisplay()}</div>\n        </div>\n          <Chat\n            className=\"chat\"\n            chat={this.props.chat}\n            sendMessage={this.props.sendMessage}\n          />\n          <section className='bottom-mid'>\n              <div className=\"players\">\n                <h2>\n                  <em>Current Players</em>\n                </h2>\n                {playerDisplay}\n              </div>\n              {this.isGenDisplay()}\n          </section>\n          <div className=\"attempts\">\n            <h2>\n              <em>Attempts</em>\n            </h2>\n            <div>\n              {this.mapAttempts()}\n            </div>\n          </div>\n      </div>\n    )\n  }\n}\n\nGamepage.propTypes = {\n  attempts: PropTypes.array,\n  attemptsLeft: PropTypes.number,\n  chat: PropTypes.array,\n  display: PropTypes.array,\n  isGenerator: PropTypes.bool,\n  isOver: PropTypes.bool,\n  makeGuess: PropTypes.func,\n  playerName: PropTypes.array,\n  scores: PropTypes.object,\n  sendMessage: PropTypes.func,\n  winners: PropTypes.array\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Lobby.scss';\n\nexport class Lobby extends Component {\n  constructor( props ) {\n    super(props);\n    this.state = {\n      roomID: null,\n      newRoomName: '',\n      newUserName: ''\n    }\n  }\n\n  render() {\n    let rooms;\n      if (this.props.rooms.length) {\n        rooms = (\n          <div className=\"room-list\">\n            <select\n              size=\"8\"\n              className=\"room-list-select\"\n              onChange={(e) => this.setState({roomID: e.target.value})}\n            >{this.props.rooms.map((roomName, i) => {\n              return (\n                <option key={i} value={roomName}>{roomName}</option>\n              )\n            })}\n            </select>\n            <button\n              className=\"join-room-btn\"\n              data-testid=\"join-room-btn\"\n              onClick={() => this.props.joinRoom(this.state.roomID)}\n            >Join room!</button>\n          </div>\n        );\n      } else {\n        rooms = <h3>Seems like there are no open rooms. Use the form below to open one!</h3>;\n      }\n\n    return (\n      <div className=\"lobby\" data-testid=\"lobby\">\n        <h1><em>Create a username</em></h1>\n        <form>\n          <label>\n            <input\n              className=\"username-input\"\n              type=\"text\"\n              onChange={(e) => this.setState({newUserName: e.target.value})}\n              placeholder=\"Username\"\n            />\n          </label>\n          <input\n            className=\"username-btn\"\n            type=\"submit\"\n            value=\"Submit\"\n            data-testid='test-username-btn'\n            onClick={(e) => {\n              e.preventDefault();\n              this.props.setUserName(this.state.newUserName)\n            }}\n          />\n        </form>\n        <h1><em>Available Rooms</em></h1>\n        {rooms}\n        <form>\n          <label>\n            <input\n              className=\"new-room-input\"\n              type=\"text\"\n              onChange={(e) => this.setState({newRoomName: e.target.value})}\n              placeholder=\"Room ID\"\n            />\n          </label>\n          <input\n            className=\"new-room-btn\"\n            type=\"submit\"\n            value=\"Submit\"\n            placeholder=\"Create\"\n            data-testid='create-room-btn'\n            onClick={(e) => {\n              e.preventDefault();\n              this.props.createRoom(this.state.newRoomName)\n            }}\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\nLobby.propTypes = {\n  rooms: PropTypes.array,\n  createRoom: PropTypes.func,\n  joinRoom: PropTypes.func,\n  setUserName: PropTypes.func,\n}\n","import './Footer.scss';\nimport React, { Component } from 'react';\n\nexport class Footer extends Component{\n    constructor() {\n        super()\n        this.state = {\n            creditsClicked: false\n        }\n    }\n    render() {\n        return (\n            <div className=\"footer\">\n                <button\n                id='credits'\n                  onClick={\n                    () => this.setState({creditsClicked: !this.state.creditsClicked})\n                  }\n                >\n                <em>Credits</em>\n                </button>\n\n                <a \n                href='https://github.com/GreyMatteOr' \n                id='creditName' \n                className={!this.state.creditsClicked ? 'hidden' : 'showNames'}\n                ><p className='p'>Matt</p></a>\n\n                <a \n                href='https://github.com/holladayian' \n                id='creditName' \n                className={!this.state.creditsClicked ? 'hidden' : 'showNames'}\n                ><p className='p'>Ian</p></a>\n\n                <a \n                href='https://chriscastanuela.github.io/Christopher-Anthony-Castanuela/' \n                id='creditName' \n                className={!this.state.creditsClicked ? 'hidden' : 'showNames'}><p className='p'>Chris</p></a>\n            </div>\n        )\n    }\n}","import {createBrowserHistory} from 'history';\nexport default createBrowserHistory();","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Router } from 'react-router-dom';\nimport History from './History.js';\n\nwindow.onload = History.push('/lobby')\n\nReactDOM.render(\n  <Router history={History}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}