{"version":3,"sources":["Homepage/Homepage.js","assets/loading.png","WordSelector/WordSelector.js","Gamepage/Gamepage.js","Lobby/Lobby.js","App.js","History.js","reportWebVitals.js","index.js"],"names":["Homepage","props","className","data-testid","disabled","hasGenerator","onClick","designateRole","propType","PropTypes","func","WordSelector","updateChange","e","preventDefault","setState","guessWord","target","value","makeWordToGuess","state","this","isGenerator","type","name","onChange","placeholder","id","src","loading","alt","Component","bool","Gamepage","currentGuess","makeGuess","mapAttempts","theKey","attempts","map","attempt","splitDisplay","theTestId","display","tile","isGenDisplay","render","hints","correctGuesses","array","Lobby","roomID","newRoomName","rooms","length","size","roomName","i","joinRoom","createRoom","client","createBrowserHistory","App","componentDidMount","ioc","connect","on","console","log","emit","setRole","role","sendWordToGuess","word","newGuess","resetGame","inGame","isGameReady","isLoading","isOver","History","window","setTimeout","push","setHistory","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","history","document","getElementById"],"mappings":"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","file":"static/js/main.992efc2d.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Homepage.css';\n\nexport const Homepage = (props) => {\n  return (\n    <div className=\"homepage\" data-testid=\"homepage\">\n      <h1><em>Choose a role</em></h1>\n      <div className=\"character-select\">\n        <button\n          className=\"generator\"\n          disabled={props.hasGenerator}\n          onClick={() => {\n            props.designateRole(true)\n          }}>\n          Generator\n        </button>\n        <button\n          className=\"guesser\"\n          onClick={() => {\n            props.designateRole(false)\n          }\n        }>\n          Guesser\n        </button>\n      </div>\n      <h1><em>Score: </em></h1>\n    </div>\n  )\n}\n\n\nHomepage.propType = {\n  designateRole: PropTypes.func,\n}\n","export default __webpack_public_path__ + \"static/media/loading.b33cf617.png\";","import React, {Component} from 'react';\nimport loading from '../assets/loading.png';\nimport PropTypes from 'prop-types';\nimport './WordSelector.css';\n\nexport class WordSelector extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      guessWord: ''\n    }\n  }\n\n  updateChange = (e) => {\n    e.preventDefault();\n    this.setState({guessWord: e.target.value})\n  }\n\n  makeWordToGuess = (e) => {\n    e.preventDefault();\n    this.props.makeWordToGuess(this.state.guessWord)\n  }\n\n  render() {\n    if (this.props.isGenerator) {\n      return (\n        <div className=\"selection-page\" data-testid=\"word-selector\">\n          <h2><em>Type a word for your opponent to guess!</em></h2>\n          <form>\n            <label>\n              <input type=\"text\" name=\"name\" onChange={this.updateChange} placeholder=\"Name\"/>\n            </label>\n            <input\n              id='wordSubmit'\n              type=\"submit\"\n              value=\"Submit\"\n              placeholder=\"Submit\"\n              onClick={(e) => {\n                this.makeWordToGuess(e)\n              }}\n            />\n          </form>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"selection-page\">\n          <h2><em>Your opponent is thinking of a word...</em></h2>\n          <img src={loading} alt=\"Loading image\" className='Loading'/>\n        </div>\n      )\n    }\n  }\n}\n\n\nWordSelector.propType = {\n  makeWordToGuess: PropTypes.func,\n  isGenerator: PropTypes.bool\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Gamepage.css';\n\nexport class Gamepage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      hints: [],\n      correctGuesses: [],\n      currentGuess: ''\n    }\n  }\n\n  updateChange = (e) => {\n    e.preventDefault();\n    this.setState({currentGuess: e.target.value})\n  }\n\n\n  makeGuess = (e) => {\n    e.preventDefault();\n    this.props.makeGuess(this.state.currentGuess)\n  }\n\n  mapAttempts = () => {\n    let theKey = 0;\n    return this.props.attempts.map(attempt => {\n      theKey += 1;\n      return <p key={theKey}>{attempt}</p>\n    })\n  }\n\n  splitDisplay = () => {\n    let theKey = 0;\n    let theTestId = 0;\n    return this.props.display.map(tile => {\n      theKey += 1;\n      theTestId += 1;\n      return <p data-testid={`${theTestId}`} key={theKey}>{tile}</p>\n    })\n  }\n\n  isGenDisplay = () => {\n    if (!this.props.isGenerator) {\n      return (\n        <form>\n        <label>\n          <input type=\"text\" name=\"word\" className=\"word-input\" placeholder=\"Letter or Word\" onChange={this.updateChange} />\n        </label>\n        <input\n        id='guess-button'\n        type=\"submit\"\n        value=\"Guess\"\n        data-testid='word-submit-button'\n        onClick={(e) => {\n            this.makeGuess(e)\n            }}\n        />\n      </form>\n      )\n    }\n  }\n\n  render = () => {\n    return (\n      <div className=\"game-page\" data-testid=\"game-page\">\n        <div className=\"hints\">\n          <h2><em>Hints</em></h2>\n\n        </div>\n        <div className=\"board\">\n          <div className=\"draw-board\">\n            <h2><em>Draw Board</em></h2>\n          <div className=\"display-word\">{this.splitDisplay()}</div>\n          </div>\n          {this.isGenDisplay()}\n        </div>\n        <div className=\"attempts\">\n          <h2><em>Attempts</em></h2>\n        <div>{this.mapAttempts()}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nGamepage.propType = {\n  makeGuess: PropTypes.func,\n  attempts: PropTypes.array,\n  display: PropTypes.array,\n  isGenerator: PropTypes.bool,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Lobby.css';\n\nexport class Lobby extends Component {\n  constructor( props ) {\n    super(props);\n    this.state = {\n      roomID: null,\n      newRoomName: ''\n    }\n  }\n\n\n\n  render() {\n    let rooms;\n      if (this.props.rooms.length) {\n        rooms = (\n          <div>\n            <select\n              size=\"8\"\n              onChange={(e) => this.setState({roomID: e.target.value})}\n            >{this.props.rooms.map((roomName, i) => {\n              return (\n                <option key={i} value={roomName}>{roomName}</option>\n              )\n            })}\n            </select>\n            <button\n              onClick={() => this.props.joinRoom(this.state.roomID)}\n            >Join room!</button>\n          </div>\n        );\n      } else {\n        rooms = <h3>Seems like there are no open rooms. Use the form below to open one!</h3>;\n      }\n\n    return (\n      <div className=\"lobby\" data-testid=\"lobby\">\n        <h1><em>Available Rooms</em></h1>\n        {rooms}\n        <form>\n          <label>\n            <input\n              type=\"text\"\n              onChange={(e) => this.setState({newRoomName: e.target.value})}\n              placeholder=\"Room ID\"\n            />\n          </label>\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            placeholder=\"Create\"\n            onClick={(e) => {\n              e.preventDefault();\n              this.props.createRoom(this.state.newRoomName)\n            }}\n          />\n        </form>\n      </div>\n    )\n  }\n}\n\n\nLobby.propType = {\n  designateRole: PropTypes.func,\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport  { Homepage }  from '../src/Homepage/Homepage.js';\nimport  { WordSelector }  from '../src/WordSelector/WordSelector.js';\nimport  { Gamepage }  from '../src/Gamepage/Gamepage.js';\nimport  { Lobby }  from '../src/Lobby/Lobby.js';\nimport History from './History.js';\nimport './App.css';\n\nimport ioc from 'socket.io-client';\n\nlet client;\n\nexport class App extends Component{\n  constructor() {\n    super()\n    this.state = {\n      attempts: [],\n      display: [],\n      inGame: false,\n      isGameReady: false,\n      isGenerator: null,\n      isLoading: true,\n      isOver: false,\n      hasGenerator: null,\n      rooms: []\n    }\n  }\n\n  componentDidMount = () => {\n    client = ioc.connect( \"https://bangwords-api.herokuapp.com/\");\n\n    client.on( 'result', (state) => {\n      console.log(state)\n      this.setState(state);\n    });\n  }\n\n  createRoom = ( id ) => {\n    client.emit('createRoom', id)\n  }\n\n  joinRoom = ( id ) => {\n    client.emit('joinRoom', id)\n  }\n\n  setRole = (role) => {\n    client.emit('setRole', role);\n    this.setState({isGenerator: role});\n  }\n\n  sendWordToGuess = (word) => {\n    client.emit('setWord', word);\n  }\n\n  makeGuess = (newGuess) => {\n    client.emit('makeGuess', newGuess)\n  }\n\n  resetGame = () => {\n    client.emit('clear')\n  }\n\n  setHistory() {\n    if (!this.state.inGame && History[History.length -1] !== '/lobby') {\n      window.setTimeout(() => History.push('/lobby'), 1);\n    }\n\n    else if (this.state.isGameReady && History[History.length -1] !== '/gamepage') {\n      window.setTimeout(() => History.push('/gamepage'), 1);\n    }\n\n    else if ( this.state.isGenerator !== null && History[History.length -1] !== '/word-selector' ) {\n      window.setTimeout(() => History.push('/word-selector'), 1);\n    }\n\n    else if ( History[History.length -1] !== '/' ) {\n      window.setTimeout(() => History.push('/'), 1);\n    }\n  }\n\n  render() {\n    console.log(this.state)\n    if (this.state.isLoading) {\n      return (<h3>Loading...</h3>);\n    }\n    this.setHistory()\n    return (\n      <div className=\"BangWords\">\n        <header className=\"BangWords-header\">\n          {/* <h1 id='bangHeader'><em>BangWords</em></h1> */}\n          <h1 id='bangHeader'>BangWords</h1>\n          <button id='theButton' onClick={this.resetGame}><em>Reset Game</em></button>\n        </header>\n\n        <Route\n          exact path='/'\n          render={() => {\n            return (\n              <Homepage\n                designateRole={this.setRole}\n                hasGenerator={this.state.hasGenerator}\n            // addGenerator={this.addGenerator}\n            // generatorExists={this.state.generatorExists}\n              />\n            )\n          }}\n        />\n\n        <Route\n          exact path='/gamepage'\n          render={() => {\n            return (\n              <Gamepage\n                makeGuess={this.makeGuess}\n                attempts={this.state.attempts}\n                display={this.state.display}\n                isGenerator={this.state.isGenerator}\n              />\n            )\n          }}\n        />\n\n        <Route\n          exact path='/lobby'\n          render={() => {\n            return (\n              <Lobby\n                createRoom={this.createRoom}\n                joinRoom={this.joinRoom}\n                rooms={this.state.rooms}\n              />\n            )\n          }}\n        />\n\n        <Route\n          exact path='/word-selector'\n          render={() => {\n            return (\n              <WordSelector\n                makeWordToGuess={this.sendWordToGuess}\n                isGenerator={this.state.isGenerator}\n              />\n            )\n          }}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import {createBrowserHistory} from 'history';\nexport default createBrowserHistory();","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Router } from 'react-router-dom';\nimport history from './History.js';\n\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}